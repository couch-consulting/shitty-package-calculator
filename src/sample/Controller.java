package sample;
/**
 * @author Rick, Thore, Lennart
 * @version beschte Version
 */

import javafx.application.Platform;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.input.KeyEvent;

/**
 * Main Controller generated by InteliJ, no idea what it does but seems to be working doh
 */
public class Controller {
    @FXML
    private TextField width, height, depth, weight, result, result1,sizeSUPER, weightSUPER;

    @FXML
    private Label wUnit, hUnit, dUnit, weightUnit;

    @FXML
    private ComboBox lengthUnitBox, weightUnitBox;

    @FXML
    private MenuItem closeItem;

    @FXML
    private Button addbutton, clearbutton;

    // enum of length and weight properties
    private ObjectProperty<ULength> lengthProp = new SimpleObjectProperty<>();
    private ObjectProperty<UWeight> weightProp = new SimpleObjectProperty<>();

    // object of needed packages with dhl properties
    Package small = new Package(30.0, 30.0, 15.0, 1.0, 4.0);
    Package medium = new Package(60.0, 30.0, 15.0, 2.0, 4.5);
    Package largeOne = new Package(120.0, 60.0, 60.0, 5.0, 6.99);
    Package largeTwo = new Package(120.0, 60.0, 60.0, 10.0, 9.49);
    Package largeThree = new Package(120.0, 60.0, 60.0, 31.5, 16.49);

    /**
     * Initializes fxml with correct data and adds events filters/listeners
     */
    public void initialize() {


        width.addEventFilter(KeyEvent.KEY_TYPED, e -> inputFilter(e));
        height.addEventFilter(KeyEvent.KEY_TYPED, e -> inputFilter(e));
        depth.addEventFilter(KeyEvent.KEY_TYPED, e -> inputFilter(e));
        weight.addEventFilter(KeyEvent.KEY_TYPED, e -> inputFilter(e));


        addbutton.setOnAction((event) -> addPrice(result.getText(), result1.getText()));
        clearbutton.setOnAction((event) -> clearPrice());


        closeItem.setOnAction(e -> Platform.exit());

        width.textProperty().addListener((observable, oldValue, newValue) -> {
            result.setText(Double.toString(calcShippingCosts(depth.getText(), height.getText(), width.getText(), weight.getText())));
        });
        height.textProperty().addListener((observable, oldValue, newValue) -> {
            result.setText(Double.toString(calcShippingCosts(depth.getText(), height.getText(), width.getText(), weight.getText())));
        });
        depth.textProperty().addListener((observable, oldValue, newValue) -> {
            result.setText(Double.toString(calcShippingCosts(depth.getText(), height.getText(), width.getText(), weight.getText())));
        });
        weight.textProperty().addListener((observable, oldValue, newValue) -> {
            result.setText(Double.toString(calcShippingCosts(depth.getText(), height.getText(), width.getText(), weight.getText())));
        });

        //comboboxes
        for (ULength u : ULength.values())
            lengthUnitBox.setItems(FXCollections.observableArrayList(ULength.values()));


        lengthProp.addListener((observable, oldValue, newValue) -> {

            wUnit.setText(newValue.toString());
            hUnit.setText(newValue.toString());
            dUnit.setText(newValue.toString());
        });
        lengthProp.bind(lengthUnitBox.valueProperty());

        lengthUnitBox.setValue(ULength.cm);


        for (UWeight u : UWeight.values())
            weightUnitBox.setItems(FXCollections.observableArrayList(UWeight.values()));

        weightProp.addListener((observable, oldValue, newValue) -> {
            weightUnit.setText(newValue.toString());
        });
        weightProp.bind(weightUnitBox.valueProperty());

        weightUnitBox.setValue(UWeight.g);
    }

    /**
     * calculates price and returns it to the output field
     *
     * @param length length from given textfield
     * @param height height from given textfield
     * @param width  width from given textfield
     * @param weight weight from given textfield
     * @return price for output field
     */
    private double calcShippingCosts(String length, String height, String width, String weight) {
        Double d_length = Double.parseDouble(length.isEmpty() ? "0.0" : length);
        Double d_height = Double.parseDouble(height.isEmpty() ? "0.0" : height);
        Double d_width = Double.parseDouble(width.isEmpty() ? "0.0" : width);
        Double d_weight = Double.parseDouble(weight.isEmpty() ? "0.0" : weight);

        d_length = numberConversionDimensions(d_length);
        d_height = numberConversionDimensions(d_height);
        d_width = numberConversionDimensions(d_width);
        d_weight = numberConversionWeight(d_weight);

        // TODO: move comparisons to Package.java
        if (d_length <= small.getLength() && d_width <= small.getWidth() && d_height <= small.getHeight() && d_weight < small.getWeight()) {
            return small.getPrize();
        } else if (d_length <= medium.getLength() && d_width <= medium.getWidth() && d_height <= medium.getHeight() && d_weight < medium.getWeight()) {
            return medium.getPrize();
        } else if (d_length <= largeOne.getLength() && d_width <= largeOne.getWidth() && d_height <= largeOne.getHeight()) {
            if (d_weight <= largeOne.getWeight()) {
                return largeOne.getPrize();
            } else if (d_weight <= largeTwo.getWeight()) {
                return largeTwo.getPrize();
            } else if (d_weight <= largeThree.getWeight()) {
                return largeThree.getPrize();
            } else {
                return Double.NaN;
            }
        } else {
            return Double.NaN;
        }
    }

    /**
     * calculates correct weight unit for our calculation returns always kg
     *
     * @param weight weight that needs to be transfromed
     * @return weight in kg
     */
    private double numberConversionWeight(double weight) {
        String currentValue = weightUnitBox.getValue().toString();

        if (currentValue.equals("kg")) {
            return weight;
        } else if (currentValue.equals("g")) {
            return weight / 1000;

        }
        return weight;
    }

    /**
     * calculates correct dimension unit for our calculation returns always kg
     *
     * @param dimension dimension that needs to be transformed  into cm
     * @return dimension in cm
     */
    private double numberConversionDimensions(double dimension) {
        String currentValue = lengthUnitBox.getValue().toString();

        if (currentValue.equals("cm")) {
            return dimension;
        } else if (currentValue.equals("mm")) {
            return dimension / 10;
        } else if (currentValue.equals("m")) {
            return dimension * 10;
        }
        return dimension;
    }

    /**
     * only allows to enter digits and '.' into the input fields
     *
     * @param e given input from textfield enterd by user
     */
    private void inputFilter(KeyEvent e) {
        char c = e.getCharacter().charAt(0);
        if (!(Character.isDigit(c) || c == '.')) {
            e.consume();
        }
    }


    private void clearPrice() {
        result1.setText("Added Price");
    }

    private void addPrice(String resultText, String result1Text) {
        


        Double currentResult1 = 0.0;
        Double currentResult = Double.parseDouble(resultText);
        if(!result1Text.equals("Added Price")){
                   currentResult1 = Double.parseDouble(result1Text);
        }
        Double resulltfinal = currentResult + currentResult1;
        result1.setText(resulltfinal.toString());
    }

}
